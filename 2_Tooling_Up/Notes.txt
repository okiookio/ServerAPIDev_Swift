2.3 COMMAND LINE SWIFT

In Terminal
swift --version = check that you have swift on your system
swift = opens the swift REPL read-eval-print-loop (LLVM)

2.4 IBM Swift Sandbox
Online REPL = https://swift.sandbox.bluemix.net/#/repl

2.7 HTTP, WEB FRAMEWORKS, DOCUMENTATION AND RESOURCES.

HTTP = Hypertext Transfer Protocol. The foundation for data communication on the web.
Structured text that used logical links (hyperlinks) between nodes containing text. A protocol to exchange hypertext.

Web Framework = a software framework that is designed to support the development of web applications including web services, web resources and APIs. Web frameworks are aimed to alleviate the overhead associated with common activities performed in web development. They may: provide libraries for database access; templating frameworks; session management; promote code reuse.

For this tutorial we will be using Kitura as our web framework. It was developed by IBM.

RESOURCES:

https://swift.org/
Swift Programming Language (epub) in ibooks

https://developer.ibm.com/swift/
Extending Swift Values to the server (pdf)

http://www.kitura.io/
consider joining the slack channel for kitura as there are engineers available for problem solving.

https://www.ibm.com/cloud-computing/bluemix/swift
bluemix is a cloud platform provided by ibm.




2.8 SWIFT PACKAGE MANAGER AND IBM SWIFT PACKAGE CATALOGUE

Swift package manager is included with swift. Initialize a package:

Tims-Macbook-Pro-2:hello-api timbeals$ swift package init --type executable
Creating executable package: hello-api
Creating Package.swift
Creating Sources/
Creating Sources/main.swift
Creating Tests/

Now you can open .main and add your dependencies.

Tims-Macbook-Pro-2:hello-api timbeals$ nano package.swift

Go to https://packagecatalog.com and find the dependencies that you want to work with. In this case we'll user Kitura and Helium Logger. Click the 'Include project in your code' button to save the link. Then in nano...

import PackageDescription

let package = Package(
    name: "hello-api",
    dependencies: [
 (paste!!>>>>>) .Package(url: "https://github.com/IBM-Swift/Kitura.git", majorV$
                .Package(url: "https://github.com/IBM-Swift/HeliumLogger.git", $
        ]
)

Get all dependencies and compile into an executable file.

Tims-Macbook-Pro-2:hello-api timbeals$ swift build
***lots of downloads***
Linking ./.build/debug/hello-api


Sources/main.swift is where code execution begins in server side swift.
Tims-Macbook-Pro-2:Sources timbeals$ nano main.swift  >> create a print() statement

build it to include your new code...
Tims-Macbook-Pro-2:Sources timbeals$ swift build

and execute it to see the new code...
Tims-Macbook-Pro-2:hello-api timbeals$ .build/debug/hello-api
My first server side swift line of code! <- in the print statement!


Create an xCode project with swift package manager:

Tims-Macbook-Pro-2:hello-api timbeals$  swift package generate-xcodeproj

open the xcode project:

Tims-Macbook-Pro-2:hello-api timbeals$ open hello-api.xcodeproj/

If you want to run your code in xcode you just need to change the source from the framework to the binary (where you would select your device ordinarily)

Note that you don't have access to UIKit or other frameworks with opensource Swift on the server.


If you go to the kitura website, you can learn how to build an iOS app with kitura server in the same workspace!! GO:
kitura.io Getting stared> Building within xcode.







